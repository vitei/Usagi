/****************************************************************************
//	Usagi Engine, Copyright Â© Vitei, Inc. 2013
****************************************************************************/
import 'nanopb.proto';
import 'Engine/Core/usagipb.proto';

package usg;


enum VertexElementType
{
	option (nanopb_enumopt).long_names = false;

	VE_BYTE = 0;
	VE_UBYTE = 1;
	VE_SHORT = 2;
	VE_USHORT = 3;
	VE_FLOAT = 4;
	VE_INT = 5;
	VE_UINT = 6;
	VE_INVALID = 7;
};

enum TextureDimensions
{
	option (nanopb_enumopt).long_names = false;

	TD_TEXTURE1D = 0;
	TD_TEXTURE2D = 1;
	TD_TEXTURE3D = 2;
	TD_TEXTURECUBE = 3;
	
	TD_FORCE_SIZE = 0x7FFFFFFF; // Force enum size to sizeof(int32_t)
};


enum GPULocation
{
	option (nanopb_enumopt).long_names = false;

	GPU_LOCATION_STANDARD = 0;
	GPU_LOCATION_FASTMEM = 1;

	GPU_LOCATION_FORCE_SIZE = 0x7FFFFFFF;  // Force enum size to sizeof(int32_t)
}; 

enum RenderLayer
{
	option (nanopb_enumopt).long_names = false;
	LAYER_BACKGROUND = 0;
	LAYER_PRE_WORLD = 1;
	LAYER_OPAQUE = 2;
	LAYER_DEFERRED_SHADING = 3;
	LAYER_OPAQUE_UNLIT = 4;
	LAYER_SKY = 5;
	LAYER_TRANSLUCENT = 6;
	LAYER_SUBTRACTIVE = 7;
	LAYER_ADDITIVE = 8;
	LAYER_POST_PROCESS = 9;
	LAYER_OVERLAY = 10;
	LAYER_COUNT = 11;
}; 

enum SamplerWrap
{
	option (nanopb_enumopt).long_names = false;

	SAMP_WRAP_REPEAT = 0;
	SAMP_WRAP_MIRROR = 1;
	SAMP_WRAP_CLAMP = 2;
	SAMP_WRAP_COUNT = 3;

	SAMP_WRAP_FORCE_SIZE = 0x7FFFFFFF;
};

enum Anisotropy
{
	option (nanopb_enumopt).long_names = false;

	ANISO_LEVEL_1 = 0;
	ANISO_LEVEL_2 = 1;
	ANISO_LEVEL_4 = 2;
	ANISO_LEVEL_8 = 3;
	ANISO_LEVEL_16 = 4;
};

enum SamplerFilter
{
	option (nanopb_enumopt).long_names = false;

	SAMP_FILTER_POINT = 0;
	SAMP_FILTER_LINEAR = 1;
	SAMP_FILTER_COUNT = 2;

	SAMP_FILTER_FORCE_SIZE = 0x7FFFFFFF;
};

enum MipFilter
{
	option (nanopb_enumopt).long_names = false;

	MIP_FILTER_POINT = 0;
	MIP_FILTER_LINEAR = 1;
	MIP_FILTER_COUNT = 2;

	MIP_FILTER_FORCE_SIZE = 0x7FFFFFFF;
};


enum RenderMask {
	option (nanopb_enumopt).long_names = false;
	option (usagipb_enumopt).is_bitmask = true;

	// 20 bits for engine
	RENDER_MASK_NONE			= 0x00000000;
	RENDER_MASK_WORLD			= 0x00000001;
	RENDER_MASK_LIGHTING		= 0x00000002;
	RENDER_MASK_WATER			= 0x00000004;
	RENDER_MASK_WORLD_EFFECT	= 0x00000008;
	RENDER_MASK_POST_EFFECT		= 0x00000010;
	RENDER_MASK_INSIDE			= 0x00000020;
	RENDER_MASK_OUTSIDE			= 0x00000040;
	RENDER_MASK_SHADOW_CAST		= 0x00000080;
	// 12 bits for game
	RENDER_MASK_CUSTOM_0		= 0x00100000;
	RENDER_MASK_CUSTOM_1		= 0x00200000;
	RENDER_MASK_CUSTOM_2		= 0x00400000;
	RENDER_MASK_CUSTOM_3		= 0x00800000;

	// Useful predefines for cameras, everything except shadows
	RENDER_MASK_CAMERA_INSIDE	= 0x0FFFFF3F;
	RENDER_MASK_CAMERA_OUTSIDE	= 0x0FFFFF5F;
	RENDER_MASK_ALL				= 0x0FFFFF7F;
}

enum ShaderTypeFlags {
	option (nanopb_enumopt).long_names = false;
	option (usagipb_enumopt).is_bitmask = true;

	SHADER_FLAG_VERTEX		= 0x00000001;
	SHADER_FLAG_GEOMETRY 	= 0x00000002;
	SHADER_FLAG_PIXEL 		= 0x00000004;
	SHADER_FLAG_TCONTROL	= 0x00000008;
	SHADER_FLAG_TEVAL		= 0x00000010;
	SHADER_FLAG_VS_GS 		= 0x00000003;
	SHADER_FLAG_VS_PS 		= 0x00000005;
	SHADER_FLAG_ALL 		= 0x00000007;
}

enum ShaderConstantType {
	option (nanopb_enumopt).long_names = false;

	SHADER_CONSTANT_GLOBAL = 0;
	SHADER_CONSTANT_MATERIAL = 1;
	SHADER_CONSTANT_MATERIAL_1 = 2;
	SHADER_CONSTANT_CUSTOM_0 = 3;
	SHADER_CONSTANT_CUSTOM_1 = 4;
	SHADER_CONSTANT_CUSTOM_2 = 5;
	SHADER_CONSTANT_CUSTOM_3 = 6;
	SHADER_CONSTANT_LIGHTING = 7;
	SHADER_CONSTANT_SHADOW = 8;
	SHADER_CONSTANT_COUNT = 9;
}