/****************************************************************************
//	Usagi Engine, Copyright Â© Vitei, Inc. 2013
****************************************************************************/
import 'nanopb.proto';
import 'Engine/Maths/Maths.proto';
import 'Engine/Graphics/Device/StateEnums.proto';

package usg.exchange;


message Texture {
	required string textureName = 1 [(nanopb).max_size = 40];
	required uint32 wrapS = 2 [default = 0];
	required uint32 wrapT = 3 [default = 0];
	required uint32 magFilter = 4 [default = 0];
	required uint32 minFilter = 5 [default = 0];
	required uint32 mipFilter = 6 [default = 0];
	required float  lodBias = 7 [default = 0];
	required uint32 lodMinLevel = 8 [default = 0];
	required string textureHint = 9 [(nanopb).max_size = 40];
	required uint32 anisoLevel = 10 [default = 0];
}

enum Translucency_Type {
	TRANSLUCENCY_OPAQUE = 0;
	TRANSLUCENCY_TRANSLUCENT = 1;
	TRANSLUCENCY_ADDITIVE = 2;
	TRANSLUCENCY_SUBTRACTIVE = 3;
}

enum Rasterizer_Attribute {
	ALPHA_TEST_ENABLE = 0;

	DEPTH_TEST_ENABLE = 1;
	DEPTH_TEST_WRITE = 2;
	DEPTH_TEST_MASK = 3;
}



message Rasterizer {
	required uint32 attribute = 1 [default = 0];


	required uint32 depthTestFunc = 2  [default = 0];

	required uint32 blendEnabled = 3 [default = 0];
	required AlphaStateGroup alphaState = 4;

	required uint32 cullFace = 5 [default = 1];

	required uint32 isPolygonOffsetEnable = 6 [default = 0];
	required int32 polygonOffsetUnit = 7 [default = 0];

	required StencilState stencilTest = 8;

	required uint32 colorMask = 9 [default = 15]; // 0xF MASK_ALL
}


message StencilState {
	required uint32 isEnable = 1 [default = 1];
	required StencilTest func = 2 [default = STENCIL_TEST_ALWAYS];
	required uint32 ref = 3 [default = 0x80];
	required uint32 readMask = 4 [default = 0];
	required uint32 writeMask = 5 [default = 0x80];
	required StencilOp failOperation = 6 [default = STENCIL_OP_KEEP];
	required StencilOp zFailOperation = 7 [default = STENCIL_OP_KEEP];
	required StencilOp passOperation = 8 [default = STENCIL_OP_REPLACE];
}

enum Material_Constant{
	TEXTURE_NUM = 7;
}

enum TextureCoordinator_MappingMethod {
	UV_COORDINATE = 0;
	PROJECTION = 1;
	CUBE_ENV = 2;
	SPHERE_ENV = 3;
}

enum Material_RenderPass {
	DEFAULT = 0;
	DEFERRED = 1;
	TRANSPARENT = 2;
	DEPTH = 3;
	OMNI_DEPTH = 4;
}

message TextureCoordinator {
	required TextureCoordinator_MappingMethod method = 1 [default = UV_COORDINATE];
	required uint32 sourceCoordinate = 2 [default = 0];
	required uint32 refCamera = 3 [default = 0];
	required Vector2f scale = 4;
	required float rotate = 5 [default = 0.0];
	required Vector2f translate = 6;
}

message MaterialAttribute {
	
	required uint32 translucencyKind = 1 [default = 0];
}



// FIXME: This is very wasteful, 1KB per constant set per material
message ConstantData
{
	required string bufferName = 1 [(nanopb).max_size = 40];
	required uint32 uOffset = 2 [default = 0];
	required uint32 uSize = 3  [default = 0];
}

message RenderPassData
{
	required string effectName = 1 [(nanopb).max_size = 64];
	repeated ConstantData constants = 2 [(nanopb).max_count = 4, (nanopb).has_max_count = true];
	required uint32 constants_count = 3 [default = 0];
}

message Material {
	required string materialName = 1 [(nanopb).max_size = 40];
	repeated Texture textures = 2 [(nanopb).max_count = 7, (nanopb).has_max_count = true];

	required Rasterizer rasterizer = 5;
	repeated TextureCoordinator textureCoordinators = 6 [(nanopb).max_count = 7];

	required MaterialAttribute attribute = 7;

	repeated RenderPassData renderPasses = 9 [(nanopb).max_count = 5, (nanopb).has_max_count = true];	// Max count must match number of passes

	repeated sint32 constantIndexes = 13 [(nanopb).max_count = 6, (nanopb).has_max_count = true];
	
	repeated uint32 constantData =8 [(nanopb).max_count = 512, (nanopb).has_max_count = true];
}
